{"version":3,"file":"static/js/868.ca6bb6e3.chunk.js","mappings":"mOAGaA,GAAaC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,uGAGd,SAAAE,GAAC,OAAIA,EAAEC,MAAMC,QAAQ,EAApB,IAIGC,GAAaL,EAAAA,EAAAA,IAAOM,EAAAA,GAAPN,CAAH,2DACZ,SAAAE,GAAC,OAAIA,EAAEC,MAAMI,OAAOC,KAAnB,G,0GCTCC,EAAYT,EAAAA,GAAAA,IAAH,qFAGX,SAAAE,GAAC,OAAIA,EAAEC,MAAMC,QAAQ,EAApB,IAGCM,EAASV,EAAAA,GAAAA,OAAH,8D,mBCJNW,EAAe,SAAC,GAMvB,IAAD,IALCC,QACEC,EAIH,EAJGA,GACAC,EAGH,EAHGA,KACAC,EAEH,EAFGA,OAGEC,GAAWC,EAAAA,EAAAA,MAEjB,OACI,UAACR,EAAD,YACI,iCAAOK,EAAP,aAAgBC,MAChB,SAACL,EAAD,CAAQQ,QAAS,WACbF,GAASG,EAAAA,EAAAA,IAAeN,GAC3B,EAFD,sBAKX,ECnBYO,EAAiBpB,EAAAA,GAAAA,GAAH,oD,oBCKdqB,EAAW,WACpB,IAAMC,GAAcC,EAAAA,EAAAA,IAAYC,EAAAA,IAC1BR,GAAWC,EAAAA,EAAAA,MAEjB,OACI,4BACI,sCAEA,mDACA,kBAAOQ,KAAK,OAAOC,SAAU,SAAAC,GAAG,OAAIX,GAASY,EAAAA,EAAAA,GAAaD,EAAIE,OAAOC,OAArC,KAEhC,wBACKR,EAAYS,KAAI,SAAAnB,GAAO,OACpB,SAACQ,EAAD,WACI,SAACT,EAAD,CAAcC,QAASA,KADNA,EAAQC,GADT,QASvC,E,kDCpBKmB,EAAaC,EAAAA,KAAaC,MAAM,CAClCpB,KAAMmB,EAAAA,KAAaE,IAAI,EAAG,cAAcC,SAAS,2BACjDrB,OAAQkB,EAAAA,KACHE,IAAI,EAAG,cACPE,IAAI,GAAI,eACRD,SAAS,6BAGLE,EAAY,WAErB,IAAMtB,GAAWC,EAAAA,EAAAA,MACXsB,GAAWhB,EAAAA,EAAAA,IAAYiB,EAAAA,IAW7B,OACI,4BACI,uCAEA,SAAC,KAAD,CACIC,cAAe,CACX3B,KAAM,GACNC,OAAQ,IAEZ2B,iBAAkBV,EAClBW,SAAU,SAACC,EAAQC,GAnBZ,IAAAC,IAoBQF,EAnBnBL,EAASQ,MAAK,SAAAnC,GAAO,OAAIA,EAAQE,OAASgC,EAAShC,IAA9B,IACrBkC,MAAM,GAAD,OAAIF,EAAShC,KAAb,2BAGLE,GAASiC,EAAAA,EAAAA,KAAY,kBAAKH,GAAN,IAAgBjC,IAAIqC,EAAAA,EAAAA,UAgBhCL,EAAQM,WACX,EATL,UAWI,UAAC,IAAD,YACI,qCAEI,SAAC,KAAD,CAAOrC,KAAK,UACZ,SAAC,IAAD,CAAYA,KAAK,OAAOsC,UAAU,YAEtC,uCAEI,SAAC,KAAD,CAAO3B,KAAK,SAASX,KAAK,YAC1B,SAAC,IAAD,CAAYA,KAAK,SAASsC,UAAU,YAExC,mBAAQ3B,KAAK,SAAb,gCAKnB,E,UCvDc,SAAS4B,IACpB,IAAMrC,GAAWC,EAAAA,EAAAA,MAMjB,OAJAqC,EAAAA,EAAAA,YAAU,WACNtC,GAASuC,EAAAA,EAAAA,MACZ,GAAE,CAACvC,KAGA,4BACI,SAACsB,EAAD,KACA,SAACjB,EAAD,MAGX,C","sources":["components/PhoneForm/PhoneForm.styled.js","components/ContactsCard/ContactsCard.styled.js","components/ContactsCard/ContactsCard.jsx","components/Contacts/Contacts.styled.js","components/Contacts/Contacts.jsx","components/PhoneForm/PhoneForm.jsx","pages/ContactsPage.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Form, ErrorMessage } from 'formik';\n\nexport const StyledForm = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  gap: ${p => p.theme.spacing(3)};\n  max-width: 300px;\n`;\n\nexport const ErrMessage = styled(ErrorMessage)`\n  color: ${p => p.theme.colors.error};\n  font-size: 14px;\n`;","import styled from 'styled-components';\n\nexport const Container = styled.div`\n    display: flex;\n    align-items: center;\n    gap: ${p => p.theme.spacing(4)};\n`\n\nexport const Button = styled.button`\n    width: 120px;\n    height: 36px;\n`","import { deleteContacts } from \"redux/contacts\";\nimport { Button, Container } from \"./ContactsCard.styled\";\nimport { useDispatch } from \"react-redux\";\n\nexport const ContactsCard = (\n    { contact: {\n        id,\n        name,\n        number\n    } }\n) => {\n    const dispatch = useDispatch();\n\n    return (\n        <Container>\n            <p>{`${name}: ${number}`}</p>\n            <Button onClick={() => {\n                dispatch(deleteContacts(id))\n            }}>Delete</Button>\n        </Container>\n    );\n}","import styled from 'styled-components';\n\nexport const ContactElement = styled.li`\n    list-style-type: disc;\n`","import { ContactsCard } from \"components/ContactsCard/ContactsCard\";\nimport { ContactElement } from \"./Contacts.styled\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { changeFilter } from \"redux/filterSlice\";\nimport { valueCurentContacts } from \"redux/selectors\";\n\n\nexport const Contacts = () => {\n    const newContacts = useSelector(valueCurentContacts);\n    const dispatch = useDispatch();\n\n    return (\n        <div>\n            <h2>Contacts</h2>\n\n            <h3>Find contacts by name</h3>\n            <input type=\"text\" onChange={evt => dispatch(changeFilter(evt.target.value))} />\n\n            <ul>\n                {newContacts.map(contact => (\n                    <ContactElement key={contact.id}>\n                        <ContactsCard contact={contact}></ContactsCard>\n                    </ContactElement>\n                ))}\n            </ul>\n        </div>\n    );\n\n}","import { Formik, Field } from 'formik';\nimport * as Yup from 'yup';\nimport { ErrMessage, StyledForm } from './PhoneForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from '@reduxjs/toolkit';\nimport { valueContacts } from 'redux/selectors';\nimport { addContacts } from 'redux/contacts';\n\nconst quizSchema = Yup.object().shape({\n    name: Yup.string().min(3, 'Too short!').required('This field is required!'),\n    number: Yup.string()\n        .min(8, 'Min 8 mins')\n        .max(16, 'Max 16 mins')\n        .required('This field is required!'),\n});\n\nexport const PhoneForm = () => {\n\n    const dispatch = useDispatch();\n    const contacts = useSelector(valueContacts)\n\n    const onAddPhone = newPhone => {\n        if (contacts.find(contact => contact.name === newPhone.name)) {\n            alert(`${newPhone.name} is Olredy in contacts`)\n        }\n        else {\n            dispatch(addContacts({ ...newPhone, id: nanoid() }))\n        }\n    };\n\n    return (\n        <div>\n            <h2>Phonebook</h2>\n\n            <Formik\n                initialValues={{\n                    name: '',\n                    number: '',\n                }}\n                validationSchema={quizSchema}\n                onSubmit={(values, actions) => {\n                    onAddPhone(values);\n                    actions.resetForm();\n                }}\n            >\n                <StyledForm>\n                    <label>\n                        Name\n                        <Field name=\"name\" />\n                        <ErrMessage name=\"name\" component=\"div\" />\n                    </label>\n                    <label>\n                        Number\n                        <Field type=\"number\" name=\"number\" />\n                        <ErrMessage name=\"number\" component=\"div\" />\n                    </label>\n                    <button type=\"submit\">Add contact</button>\n                </StyledForm>\n            </Formik>\n        </div>\n    );\n};","import { Contacts } from \"components/Contacts/Contacts\";\nimport { PhoneForm } from \"components/PhoneForm/PhoneForm\";\nimport { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { fetchContacts } from \"redux/contacts\";\n\nexport default function ContactsPage() {\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(fetchContacts());\n    }, [dispatch]);\n\n    return (\n        <div>\n            <PhoneForm />\n            <Contacts></Contacts>\n        </div>\n    );\n}"],"names":["StyledForm","styled","Form","p","theme","spacing","ErrMessage","ErrorMessage","colors","error","Container","Button","ContactsCard","contact","id","name","number","dispatch","useDispatch","onClick","deleteContacts","ContactElement","Contacts","newContacts","useSelector","valueCurentContacts","type","onChange","evt","changeFilter","target","value","map","quizSchema","Yup","shape","min","required","max","PhoneForm","contacts","valueContacts","initialValues","validationSchema","onSubmit","values","actions","newPhone","find","alert","addContacts","nanoid","resetForm","component","ContactsPage","useEffect","fetchContacts"],"sourceRoot":""}